{"version":3,"file":"default.88d8b3c6.js","sources":["../../../../stores/alert.ts","../../../../components/AddLinkButtonModal.vue","../../../../components/SettingsModal.vue","../../../../components/ThemeModal.vue","../../../../components/AlertComponent.vue","../../../../layouts/default.vue"],"sourcesContent":["\nimport { defineStore } from 'pinia'\n\nexport const useAlertStore = defineStore('alert', {\n  state: () => ({\n      alert: false,\n      alertMessage:  'Hej!',\n      alertType:  'success',\n  }),\n  actions: {\n    getAlertStatus(): boolean {\n      return this.alert\n    },\n    removeAlert() {\n      this.alert = false\n    },\n    setAlert(alertMessage: string, alertType: string) {\n      this.alertType = alertType\n      this.alertMessage = alertMessage\n      this.alert = true\n    },\n  },\n})","<template>\n  <label for=\"my-modal-6\" class=\"btn btn-circle fixed bottom-0 right-0 m-6\">+</label>\n\n  <Teleport to=\"body\">\n    <input type=\"checkbox\" id=\"my-modal-6\" class=\"modal-toggle\" @click=\"disableEdit\"/>\n    <div class=\"modal modal-bottom sm:modal-middle\">\n      <div class=\"modal-box\">\n        <h3 class=\"font-bold text-3xl\">Add a badge</h3>\n        <p class=\"\">Here you can add a new button with any link, text and color you want. Make sure the link starts with\n            <code class=\"bg-primary rounded p-1 text-sm\">https://</code> and that the color is a hex code. You can change a badge after the fact by right clicking it.\n        </p>\n        <div class=\"form-control w-full max-w-xs\">\n          <label class=\"label\">\n            <span class=\"label-text\">Badge name</span>\n          </label>\n          <input v-model=\"name\" type=\"text\" placeholder=\"(ex. Github)\" class=\"input input-bordered w-full max-w-xs\" >\n          <label class=\"label\">\n            <span class=\"label-text\">URL</span>\n          </label>\n          <input v-model=\"url\"  type=\"text\" placeholder=\"(ex. https://github.com)\" class=\"input input-bordered w-full max-w-xs\" >\n          <label class=\"label\">\n            <span class=\"label-text\">Category</span>\n          </label>\n          <input v-model=\"group\"  type=\"text\" placeholder=\"(ex. Productivity)\" class=\"input input-bordered w-full max-w-xs\" >\n          <div class=\"mt-2 flex flex-row flex-wrap\">\n            <span v-for=\"g in groups\" class=\"badge cursor-pointer mr-1 mb-1 border-none\" @click=\"group = g\">{{g}}</span>\n          </div>\n          <label class=\"label\">\n            <span class=\"label-text\">Color</span>\n          </label>\n          <input v-model=\"color\" type=\"text\" placeholder=\"(ex. #FFF000)\" class=\"input input-bordered w-full max-w-xs\" >\n\n          <div class=\"mt-2 flex flex-row flex-wrap\">\n            <span class=\"badge cursor-pointer mr-1 mb-1\" @click=\"color = ''\">Follow theme</span>\n            <span v-for=\"c in colors\" class=\"badge cursor-pointer mr-2 mb-2 border-none text-white\" :style=\"`background-color: ${c.color}`\" @click=\"color = c.color\" >{{ c.name }}</span>\n          </div>\n\n        </div>\n        <div class=\"modal-action\">\n          <label for=\"my-modal-6\" class=\"btn\">Cancel</label>\n          <label for=\"my-modal-6\" class=\"btn btn-secondary\" @click=\"addLink\">Add</label>\n        </div>\n      </div>\n    </div>\n  </Teleport>\n\n</template>\n<script lang=\"ts\" setup>\nimport { useLinksStore } from '@/stores/links'\nimport { useAlertStore } from '~~/stores/alert'\nimport { useSettingsStore } from '~~/stores/settings'\nimport { Link } from '~~/types/types'\n\nconst groups = ['Productivity', 'School', 'Work', 'Home', 'Entertainment', 'Server', 'Training', 'Other']\nconst colors = [\n  {\n    name: 'Red',\n    color: '#dc2626'\n  },\n  {\n    name: 'Blue',\n    color: '#2563eb'\n  },\n  {\n    name:'Blue',\n    color: '#166088'\n  },\n  {\n    name: 'Blue',\n    color: '#161925'\n  },\n  {\n    name: 'Green',\n    color: '#059669'\n  },\n  {\n    name: 'Orange',\n    color: '#F6821E'\n  },\n  {\n    name: 'Purple',\n    color: '#8b5cf6'\n  },\n  {\n    name: 'Purple',\n    color: '#7D83FF'\n  },\n  {\n    name: 'Pink',\n    color: '#ec4899'\n  },\n  {\n    name: 'Gray',\n    color: '#6b7280'\n  },\n  {\n    name: 'Black',\n    color: '#111827'\n  },\n  {\n    name: 'Black',\n    color: '#000000'\n  },\n  {\n    name: 'Navy Blue',\n    color: '#0D3B66'\n  },\n  {\n    name: 'Lime',\n    color: '#31D843'\n  },\n  {\n    name: 'Brown',\n    color: '#AF7A6D'\n  },\n  {\n    name: 'Brown',\n    color: '#653239'\n  },\n  {\n    name: 'Blue Gray',\n    color: '#4F6D7A'\n  },\n  \n\n\n]\n\nconst store = useLinksStore()\nconst settingsStore = useSettingsStore()\n\nconst name = ref<string>('')\nconst url = ref<string>('')\nconst color = ref<string>('')\nconst group = ref<string>('')\n\nconst disableEdit = () => {\n  settingsStore.setEdit(false)\n}\n\nconst alertStore = useAlertStore()\n\nconst addLink = () => {\n  // check if link with same name already exist\n  const link = store.links.find((l: Link) => l.name === name.value)\n  if(link) {\n    alertStore.setAlert('A link with the same name already exist', 'error')\n    return\n  }\n\n  const l: Link = {\n    'name': name.value,\n    'url': url.value,\n    'color': color.value,\n    'group': group.value !== '' ? group.value : 'Other'\n  }\n  store.addLink(l)\n}\n</script>","<template>\n  <label for=\"settings-modal\" class=\"btn btn-circle fixed bottom-0 left-0 m-6\" @click=\"disableEdit\">\n    <svg class=\"swap-off fill-current\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 512 512\"><path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\"/></svg>\n  </label>\n\n  <Teleport to=\"body\">\n    <input type=\"checkbox\" id=\"settings-modal\" class=\"modal-toggle\" />\n    <div class=\"modal modal-bottom sm:modal-middle\">\n      <div class=\"modal-box\">\n        <h1 class=\"font-bold text-3xl\">Settings</h1>\n        <h1 class=\"font-bold text-xl my-2\">Images</h1>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Image link (leave empty for random image)</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"image\" type=\"text\" placeholder=\"(ex. https://something.com/image)\" class=\"flex-1 input input-bordered\" />\n          </label>\n          <span class=\"badge my-2 cursor-pointer hover:opacity-70\"  @click=\"image = ''\">Random images</span>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Background image link</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"backgroundImage\" type=\"text\" placeholder=\"(ex. https://image.com/image)\" class=\"flex-1 input input-bordered\" />\n            <button class=\"btn\" @click=\"backgroundImage = ''\">Reset</button>\n          </label>\n        </div>\n        <hr class=\"my-6 opacity-20\">\n        <h1 class=\"font-bold text-xl mb-2 mt-4\">Name</h1>\n        <div class=\"form-control w-full\">\n          <div class=\"flex flex-row space-x-2\">\n            <input v-model=\"username\" type=\"text\" placeholder=\"(ex. Cagemaster)\" class=\"input input-bordered w-full max-w-xs\" />\n          </div>\n        </div>\n        <hr class=\"my-6 opacity-20\">\n\n        <h1 class=\"font-bold text-xl mb-2 mt-4\">More settings</h1>\n        <div class=\"form-control\">\n          <label class=\"label cursor-pointer w-48\">\n            <span class=\"label-text\">Show search bar</span> \n            <input v-model=\"searchbar\" type=\"checkbox\" class=\"checkbox checkbox-primary\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label cursor-pointer w-48\">\n            <span class=\"label-text\">Show date</span> \n            <input v-model=\"showDate\" type=\"checkbox\" class=\"checkbox checkbox-primary\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label cursor-pointer w-48\">\n            <span class=\"label-text\">Show clock</span> \n            <input v-model=\"showClock\" type=\"checkbox\" class=\"checkbox checkbox-primary\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">Image opacity</label>\n          <input type=\"range\" min=\"0\" max=\"100\" v-model=\"imageOpacity\" class=\"range\" />\n        </div>\n        <hr class=\"my-6 opacity-20\">\n\n        <h1 class=\"text-xl font-bold mb-2 mt-4\">Plex Widget</h1>\n        <p>\n          The plex widget enables you to see current streams on your server. Due to SSL certificates you'll need to supply a SSL certified Plex domain like <code>https://plex.domain.com</code>, or if you host this startpage without SSL you can just supply the external IP address and port of your Plex server like so: <code>http://EXTERNAL_IP:32400</code>.\n        </p>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Plex server token</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"plexToken\" type=\"text\" placeholder=\"(ex. g432YRTEWy5g454ytrgQ)\" class=\"flex-1 input input-bordered\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Plex server URL and port</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"plexURL\" type=\"text\" placeholder=\"(ex. https://plex.domain.com)\" class=\"flex-1 input input-bordered\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">Update interval</label>\n          <input type=\"range\" min=\"10\" max=\"60\" step=\"10\" v-model=\"plexUpdateInterval\" class=\"range\" />\n          <div class=\"w-full flex justify-between text-xs px-2\">\n            <span v-for=\"i in 6\">{{ i * 10 }}s</span>\n          </div>\n          <label class=\"label text-xs italic opacity-80\">Requires reload of page</label>\n        </div>\n        <h1 class=\"text-xl font-bold mb-2 mt-4\">Weather Widget</h1>\n        <p>\n        </p>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Open Weather API token</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"weatherToken\" type=\"text\" placeholder=\"(ex. g432YRTEWy5g454ytrgQ)\" class=\"flex-1 input input-bordered\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Latitude</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"weatherLat\" type=\"text\" placeholder=\"(ex. 50.23)\" class=\"flex-1 input input-bordered\" />\n          </label>\n        </div>\n        <div class=\"form-control\">\n          <label class=\"label\">\n            <span class=\"label-text\">Longitude</span>\n          </label>\n          <label class=\"input-group\">\n            <input v-model=\"weatherLon\" type=\"text\" placeholder=\"(ex. 16.17)\" class=\"flex-1 input input-bordered\" />\n          </label>\n        </div>\n        <div class=\"modal-action\">\n          <label for=\"settings-modal\" class=\"btn mr-auto bg-red-900 text-white\" @click=\"clearAllData\">Clear all data</label>\n          <label for=\"settings-modal\" class=\"btn\">Cancel</label>\n          <label for=\"settings-modal\" class=\"btn btn-secondary\" @click=\"save\">Save</label>\n        </div>\n      </div>\n    </div>\n  </Teleport>\n\n</template>\n<script lang=\"ts\" setup>\nimport { useSettingsStore } from '@/stores/settings'\nimport { useLinksStore } from '~~/stores/links'\nimport { useWeatherStore } from '~~/stores/weather'\nconst store = useSettingsStore()\nconst linksStore = useLinksStore()\nconst weatherStore = useWeatherStore()\n\nconst image = ref<string>(store.getImage)\nconst username = ref<string>(store.username)\nconst searchbar = ref(store.searchbar)\nconst showDate = ref(store.showDate)\nconst showClock = ref(store.showClock)\nconst backgroundImage = ref(store.backgroundImage)\nconst imageOpacity = ref(store.getImageOpacity)\nconst plexToken = ref(store.plexToken)\nconst plexURL = ref(store.plexURL)\nconst plexUpdateInterval = ref(computed({\n  get: () => store.plexUpdateInterval,\n  set: (value: number) => store.setPlexUpdateInterval(value)\n}))\nconst weatherToken = ref(computed({\n  get: () => weatherStore.token,\n  set: (value: string) => weatherStore.setToken(value)\n}))\nconst weatherLat = ref(computed({\n  get: () => weatherStore.lat,\n  set: (value: number) => weatherStore.setLat(value)\n}))\nconst weatherLon = ref(computed({\n  get: () => weatherStore.lon,\n  set: (value: number) => weatherStore.setLon(value)\n}))\n\nconst save = () => {\n  store.setImage(image.value)\n  store.setUsername(username.value)\n  store.setSearchbar(searchbar.value)\n  store.setShowDate(showDate.value)\n  store.setShowClock(showClock.value)\n  store.setBackgroundImage(backgroundImage.value)\n  store.setImageOpacity(imageOpacity.value)\n  store.setPlexToken(plexToken.value)\n  store.setPlexURL(plexURL.value)\n}\n\nconst disableEdit = () => {\n  store.setEdit(false)\n}\n\nconst clearAllData = () => {\n  store.clearAllData()\n  linksStore.clearAllData()\n  window.location.reload()\n}\n\n</script>\n\n<style>\n.form-control {\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n}\n</style>","<template>\n  <div class=\"fixed top-0 left-0 m-6\">\n    <select data-choose-theme class=\"select select-ghost w-full max-w-xs \">\n      <option value=\"halloween\">Halloween</option>\n      <option value=\"cyberpunk\">Cyberpunk</option>\n      <option value=\"bumblebee\">Bumblebee</option>\n      <option value=\"synthwave\">Synthwave</option>\n      <option value=\"dark\">Gray</option>\n      <option value=\"forest\">Forest</option>\n      <option value=\"black\">Black</option>\n      <option value=\"dracula\">Dracula</option>\n      <option value=\"coffee\">Coffee</option>\n      <option value=\"night\">Night</option>\n    </select>\n  </div>\n</template>\n\n<script lang=\"ts\" setup></script>","<template>\n  <transition name=\"slide\">\n    <div class=\"alert alert-warning text-black shadow-lg fixed bottom-0 left-0 z-50 m-12 w-96\" v-if=\"alert\">\n      <div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current flex-shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" /></svg>\n        <span class=\"text-black\">{{alertMessage}}</span>\n      </div>\n      <div class=\"flex-none\">\n        <button class=\"btn btn-sm btn-secondary\" @click=\"close\">Close</button>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { useAlertStore } from '~~/stores/alert'\n\nconst alertStore = useAlertStore()\n\nconst alert = ref<boolean>(alertStore.getAlertStatus())\nconst alertMessage = computed(() => alertStore.alertMessage)\nconst alertType = computed(() => alertStore.alertType)\n\nwatch(() => alertStore.alert, (newAlert: boolean) => {\n  alert.value = newAlert\n})\n\nconst close = () => {\n  alertStore.removeAlert()\n}\n</script>\n\n<style>\n/* vue transition slide */\n.slide-enter-active, .slide-leave-active {\n  transition: all .5s ease;\n}\n.slide-enter-from,\n.slide-leave-to {\n  transform: translateX(-200px);\n  opacity: 0;\n}\n\n</style>","<template>\n  <div ref=\"main\" class=\"relative\">\n    <div class=\"z-10 md:mx-auto px-4 md:px-0 m-0\">\n      <slot />\n    </div>\n    <AddLinkButtonModal />\n    <SettingsModal />\n    <ThemeModal />\n    <AlertComponent />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useSettingsStore } from '~~/stores/settings';\nconst settingsStore = useSettingsStore()\nconst background = computed(() => settingsStore.getBackgroundImage)\nconst main = ref(null)\n\nonMounted(() => {\n  main.value.style.backgroundImage = `url(${background.value})`\n  main.value.style.backgroundSize = 'cover'\n})\n\nwatch(background, (newVal) => {\n  main.value.style.backgroundImage = `url(${newVal})`\n  main.value.style.backgroundSize = 'cover'\n})\n</script>"],"names":["useAlertStore","defineStore","alertMessage","alertType","groups","colors","store","useLinksStore","settingsStore","useSettingsStore","name","ref","url","color","group","disableEdit","alertStore","addLink","l2","l","linksStore","weatherStore","useWeatherStore","image","username","searchbar","showDate","showClock","backgroundImage","imageOpacity","plexToken","plexURL","plexUpdateInterval","computed","value","weatherToken","weatherLat","weatherLon","save","clearAllData","_hoisted_3","_sfc_render","_ctx","_cache","alert","watch","newAlert","close","background","main","newVal"],"mappings":"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"}